% result = 1 for positive sample, -1 for negative sample, 0 for spurious
function result = dRealCheck(paramValues, paramNames, initMode, template, dRealPath, timeBound, unrollDepth, taskID)

timeout = '60';

if ~exist('taskID', 'var') || isempty(taskID)
    taskID = 0;
end

result = -1;

if length(paramValues)~=length(paramNames)
    error('Arguments paramValues and paramNames have inconsistent lengths')
end

headerString = ['//autogenerated',newline];
for i=1:length(paramValues)
    headerString = [headerString, '#define ' paramNames{i}, '0 ', num2str(paramValues(i)), newline];
end

headerString = [headerString, '#define Tf ', num2str(timeBound), newline];

template = strrep(template,'@startMode',['@',num2str(initMode)]);


drhContent = [headerString,template];

tmp_folder = 'tmp';
if ~exist(tmp_folder,'dir')
    mkdir(tmp_folder);
end

drhFilePath = sprintf('%s/dReal_synth_tmp_task%d.drh',tmp_folder,taskID);

fid_drh = fopen(drhFilePath,'w');

fprintf(fid_drh,'%c',drhContent);

fclose(fid_drh);

currentDir = pwd;
% system(['cd ', dRealPath]);
path1 = getenv('PATH');
if ~contains(path1,dRealPath)
    path1 = [path1, ':', dRealPath];
    setenv('PATH', path1);
end

% NOTE THAT ulimit is only for Unix
drhCommand = sprintf('ulimit -t %s; dReach -l %d -u %d "%s" --model',timeout,unrollDepth(1),unrollDepth(2),[currentDir,'/',drhFilePath]);
[~,cmd_out] = system(drhCommand);

% disp(synthCommand)
%disp(cmd_out)
%disp(getenv('PATH'))
if contains(cmd_out,'delta-sat with delta =')
    result=1;
elseif ~contains(cmd_out,'unsat')
    result = 0;% spurious/timeout
end
end
 
