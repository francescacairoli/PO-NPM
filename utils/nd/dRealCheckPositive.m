% result = 1 for positive sample, -1 for negative sample, 0 for spurious
function result = dRealCheckPositive(paramValues, paramNames, initMode, templateSynthString, templateCheckString, dRealPath, timeBound, unrollDepth, taskID)

timeout = '60';

if ~exist('taskID', 'var') || isempty(taskID)
    taskID = 0;
end

result = -1;

if length(paramValues)~=length(paramNames)
    error('Arguments paramValues and paramNames have inconsistent lengths')
end

headerString = ['//autogenerated',newline];
for i=1:length(paramValues)
    headerString = [headerString, '#define ' paramNames{i}, '0 ', num2str(paramValues(i)), newline];
end

headerString = [headerString, '#define Tf ', num2str(timeBound), newline];

templateSynthString = strrep(templateSynthString,'@startMode',['@',num2str(initMode)]);
templateCheckString = strrep(templateCheckString,'@startMode',['@',num2str(initMode)]);

synthContent = [headerString,templateSynthString];
checkContent = [headerString,templateCheckString];

synthFilePath = sprintf('dReal_synth_tmp_task%d.drh',taskID);
checkFilePath = sprintf('dReal_check_task%d.drh',taskID);

fid_synth = fopen(synthFilePath,'w');
fid_check = fopen(checkFilePath,'w');

fprintf(fid_synth,'%c',synthContent);
fprintf(fid_check,'%c',checkContent);

fclose(fid_synth);
fclose(fid_check);

currentDir = pwd;
% system(['cd ', dRealPath]);
path1 = getenv('PATH');
if ~contains(path1,dRealPath)
    path1 = [path1, ':', dRealPath];
    setenv('PATH', path1);
end

% NOTE THAT ulimit is only for Unix
synthCommand = sprintf('ulimit -t %s; dReach -l %d -u %d "%s" --model',timeout,unrollDepth(1),unrollDepth(2),[currentDir,'/',synthFilePath]);
[~,synth_out] = system(synthCommand);

% disp(synthCommand)
% disp(synth_out)

k = strfind(synth_out,'delta-sat with delta =');

if ~isempty(k)
    synth_out1 = split(extractAfter(synth_out,k),'For k = ');
    synth_out1 = split(synth_out1{2}, ', ');
    checkDepth = str2double(synth_out1{1});
    
    checkCommand = sprintf('ulimit -t %s; dReach -l %d -u %d "%s" --model', timeout, checkDepth, checkDepth,[currentDir,'/',checkFilePath]);
    [~,check_out] = system(checkCommand);
    
    %if ~contains(check_out,'delta-sat with delta =')
    if contains(check_out,'unsat')
        result = 1;
    else
        result = 0;% spurious/timeout
    end
elseif ~contains(synth_out,'unsat')
    result = 0;% spurious/timeout
end
end
    
% to read templates from file:
% fid = fopen('cruise_ctrl_fwd_synth_template.drh');
% templateSynthString = fscanf(fid, '%c');
% fclose(fid);
% fid = fopen('cruise_ctrl_fwd_check_template.drh');
% templateCheckString = fscanf(fid, '%c');
% fclose(fid);
% dRealPath = '/Users/nicolapaoletti/work/tools/dReal-3.16.09.01-darwin/bin';

%dRealCheckPositive([0,-1.9999, 105.3912], {'t0', 'v0', 'x0'}, templateSynthString, templateCheckString, dRealPath, [1,10])